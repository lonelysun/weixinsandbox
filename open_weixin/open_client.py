# -*- coding: utf-8 -*-###############################################################################  COMPANY: BONN#  AUTHOR: KIWI#  EMAIL: arborous@gmail.com#  VERSION : 1.0   NEW  2015/12/12#  UPDATE : NONE#  Copyright (C) 2011-2016 www.mychinavip.com All Rights Reserved##############################################################################import requestsfrom lxml import etreefrom requests.compat import json as _jsonfrom openerp.tools import DEFAULT_SERVER_DATETIME_FORMATfrom openerp import SUPERUSER_IDimport loggingimport timefrom HTMLParser import HTMLParserimport urllib2import hashlib_logger = logging.getLogger(__name__)import osBASE_DIR = os.path.dirname(os.path.dirname(__file__))class ClientException(Exception):    passopen_wx_errcode = {    '-1': u'系统繁忙，请稍候再试',    '0': u'请求成功',    '40001': u'不合法的调用凭证(invalid credential)',    '40002': u'不合法的grant_type(invalid grant_type)',    '40003': u'不合法的OpenID(invalid openid)',    '40004': u'不合法的媒体文件类型(invalid media type)',    '40007': u'不合法的media_id(invalid media_id)',    '40008': u'不合法的message_type(invalid message type)',    '40009': u'不合法的图片大小(invalid image size)',    '40010': u'不合法的语音大小(invalid voice size)',    '40011': u'不合法的视频大小(invalid video size)',    '40012': u'不合法的缩略图大小(invalid thumb size)',    '40013': u'不合法的AppID(invalid appid)',    '40014': u'不合法的access_token(invalid access_token)',    '40015': u'不合法的菜单类型(invalid menu type)',    '40016': u'不合法的菜单按钮个数(invalid button size)',    '40017': u'不合法的按钮类型(invalid button type)',    '40018': u'不合法的按钮名称长度(invalid button name size)',    '40019': u'不合法的按钮KEY长度(invalid button key size)',    '40020': u'不合法的url长度(invalid button url size)',    '40023': u'不合法的子菜单按钮个数(invalid sub button size)',    '40024': u'不合法的子菜单类型(invalid sub button type)',    '40025': u'不合法的子菜单按钮名称长度(invalid sub button name size)',    '40026': u'不合法的子菜单按钮KEY长度(invalid sub button key size)',    '40027': u'不合法的子菜单按钮url长度(invalid sub button url size)',    '40029': u'不合法或已过期的code(invalid code)',    '40030': u'不合法的refresh_token(invalid refresh_token)',    '40036': u'不合法的template_id长度(invalid template_id size)',    '40037': u'不合法的template_id(invalid template_id)',    '40039': u'不合法的url长度(invalid url size)',    '40048': u'不合法的url域名(invalid url domain)',    '40054': u'不合法的子菜单按钮url域名(invalid sub button url domain)',    '40055': u'不合法的菜单按钮url域名(invalid button url domain)',    '40066': u'不合法的url(invalid url)',    '41001': u'缺失access_token参数(access_token missing)',    '41002': u'缺失appid参数(appid missing)',    '41003': u'缺失refresh_token参数(refresh_token missing)',    '41004': u'缺失secret参数(appsecret missing)',    '41005': u'缺失二进制媒体文件(media data missing)',    '41006': u'缺失media_id参数(media_id missing)',    '41007': u'缺失子菜单数据(sub_menu data missing)',    '41008': u'缺失code参数(missing code)',    '41009': u'缺失openid参数(missing openid)',    '41010': u'缺失url参数(missing url)',    '42001': u'access_token超时(access_token expired)',    '42002': u'refresh_token超时(refresh_token expired)',    '42003': u'code超时(code expired)',    '43001': u'需要使用GET方法请求(require GET method)',    '43002': u'需要使用POST方法请求(require POST method)',    '43003': u'需要使用HTTPS(require https)',    '43004': u'需要订阅关系(require subscribe)',    '44001': u'空白的二进制数据(empty media data)',    '44002': u'空白的POST数据(empty post data)',    '44003': u'空白的news数据(empty news data)',    '44004': u'空白的内容(empty content)',    '44005': u'空白的列表(empty list size)',    '45001': u'二进制文件超过限制(media size out of limit)',    '45002': u'content参数超过限制(content size out of limit)',    '45003': u'title参数超过限制(title size out of limit)',    '45004': u'description参数超过限制(description size out of limit)',    '45005': u'url参数长度超过限制(url size out of limit)',    '45006': u'picurl参数超过限制(picurl size out of limit)',    '45007': u'播放时间超过限制（语音为60s最大）(playtime out of limit)',    '45008': u'article参数超过限制(article size out of limit)',    '45009': u'接口调动频率超过限制(api freq out of limit)',    '45010': u'建立菜单被限制(create menu limit)',    '45011': u'频率限制(api limit)',    '45012': u'模板大小超过限制(template size out of limit)',    '45016': u'不能修改默认组(can\'t modify sys group)',    '45017': u'修改组名过长(can\'t set group name too long sys group)',    '45018': u'组数量过多(too many group now, no need to add new)',    '50001': u'接口未授权(api unauthorized)',    '61005': u'票据过期(component ticket is expired)'}def check_error(json):    """    检测开放平台返回值中是否包含错误的返回码。    """    if "errcode" in json and json["errcode"] != 0:        errmsg = str(json["errmsg"])        if str(json["errcode"]) in open_wx_errcode:            errmsg = open_wx_errcode[str(json["errcode"])]        _logger.warn(u"{}: {}".format(json["errcode"], errmsg))        return {"errcode": json["errcode"], "errmsg": errmsg}    return jsonclass MLStripper(HTMLParser):    def __init__(self):        self.reset()        self.fed = []    def handle_data(self, d):        self.fed.append(d)    def get_data(self):        return ''.join(self.fed)class OpenWXClient(object):    """    微信开放平台 API 操作类    通过这个类可以方便的通过微信开放平台 API 进行一系列操作    """    def __init__(self, pool, cr, public_account_id, appid, appsecret, verifyticket, token=None, token_expires_at=None):        self.pool = pool        self.cr = cr        self.public_account_id = public_account_id        self.appid = appid        self.appsecret = appsecret        self.verifyticket = verifyticket        self._token = token        self.token_expires_at = token_expires_at    def request(self, method, url, **kwargs):        if 'need_access_token' in kwargs:            need_access_token = kwargs.pop('need_access_token')        else:            need_access_token = True        if "params" not in kwargs and need_access_token:            kwargs["params"] = {"component_access_token": self.token}        if isinstance(kwargs.get("data", ""), dict):            body = _json.dumps(kwargs["data"], ensure_ascii=False)            body = body.encode('utf8')            kwargs["data"] = body        r = requests.request(            method=method,            url=url,            **kwargs        )        r.raise_for_status()        json = r.json()        _logger.info(u"调用方法：%s,地址：%s,参数：%s。返回结果:%s", method, url, kwargs, json)        if '40001' == json.get('errcode', False):            # 强制刷新TOKEN            self.token(True)        return check_error(json)    # def grant_token(self):    #     """    #     获取 Access Token 。    #     :return: 返回的 JSON 数据包    #     """    #     kwargs = {'data':    #         {    #             "component_appid": self.appid,    #             "component_appsecret": self.appsecret,    #             "component_verify_ticket": self.verifyticket    #         }    #     }    #     body = _json.dumps(kwargs["data"], ensure_ascii=False)    #     kwargs["data"] = body.encode('utf8')    #     r = requests.request(    #         method='post',    #         url='https://api.weixin.qq.com/cgi-bin/component/api_component_token',    #         **kwargs    #     )    #     r.raise_for_status()    #     json = r.json()    #     if '40001' == json.get('errcode', False):    #         # 强制刷新TOKEN    #         self.token(True)    #     return check_error(json)    def get(self, url, **kwargs):        return self.request(            method="get",            url=url,            **kwargs        )    def post(self, url, **kwargs):        return self.request(            method="post",            url=url,            **kwargs        )    def grant_token(self):        """        获取 Access Token 。        :return: 返回的 JSON 数据包        """        return self.post(            need_access_token=False,            url="https://api.weixin.qq.com/cgi-bin/component/api_component_token",            data={                'need_access_token': False,                "component_appid": self.appid,                "component_appsecret": self.appsecret,                "component_verify_ticket": self.verifyticket            }        )    def api_create_preauthcode(self):        """        该API用于获取预授权码。预授权码用于公众号授权时的第三方平台方安全验证。        :return: 返回的 JSON 数据包        """        return self.post(            url="https://api.weixin.qq.com/cgi-bin/component/api_create_preauthcode",            data={                "component_appid": self.appid,            }        )    def api_query_auth(self, authorization_code):        """        使用授权码换取公众号的接口调用凭据和授权信息        该API用于使用授权码换取授权公众号的授权信息，并换取authorizer_access_token和authorizer_refresh_token。        授权码的获取，需要在用户在第三方平台授权页中完成授权流程后，在回调URI中通过URL参数提供给第三方平台方。        请注意，由于现在公众号可以自定义选择部分权限授权给第三方平台，因此第三方平台开发者需要通过该接口来获取公众号具体授权了哪些权限，        而不是简单地认为自己声明的权限就是公众号授权的权限。        :return: 返回的 JSON 数据包        """        return self.post(            url="https://api.weixin.qq.com/cgi-bin/component/api_query_auth",            data={                "component_appid": self.appid,                "authorization_code": authorization_code,            }        )    def merchant_qualification_apply(self, post_data):        """        使用授权码换取公众号的接口调用凭据和授权信息        该API用于使用授权码换取授权公众号的授权信息，并换取authorizer_access_token和authorizer_refresh_token。        授权码的获取，需要在用户在第三方平台授权页中完成授权流程后，在回调URI中通过URL参数提供给第三方平台方。        请注意，由于现在公众号可以自定义选择部分权限授权给第三方平台，因此第三方平台开发者需要通过该接口来获取公众号具体授权了哪些权限，        而不是简单地认为自己声明的权限就是公众号授权的权限。        :return: 返回的 JSON 数据包        """        return self.post(            url="http://api.weixin.qq.com/cgi-bin/component/upload_card_merchant_qualification",            params={                "access_token": self.token,            },            data=post_data        )    def merchant_qualification_query(self, app_id):        """        子商户资质审核查询接口        该接口用于查询子商户资质审核的结果，审核通过后才能进行后续授权流程。 注意，用母商户去调用接口，但接口内传入的是子商户的appid。        :return: 返回的 JSON 数据包        """        return self.post(            url="http://api.weixin.qq.com/cgi-bin/component/check_card_merchant_qualification",            params={                "access_token": self.token,            },            data={                'appid': app_id            }        )    def get_card_merchant(self, app_id):        """        拉取单个子商户信息接口        通过指定的子商户appid，拉取该子商户的基础信息。 注意，用母商户去调用接口，但接口内传入的是子商户的appid。        :return: 返回的 JSON 数据包        """        return self.post(            url="http://api.weixin.qq.com/cgi-bin/component/get_card_merchant",            params={                "access_token": self.token,            },            data={                'appid': app_id            }        )    @property    def token(self, refresh=False):        """        被动更新TOKEN,发现TOKEN失效后重新设置TOKEN值        :return:        """        self.token_expires_at = time.mktime(time.strptime(self.token_expires_at, DEFAULT_SERVER_DATETIME_FORMAT))        if self.token_expires_at > 0 and not refresh:            now = time.time()            if self.token_expires_at - now > 60:                return self._token        json = self.grant_token()        if 'component_access_token' in json:            self._token = json["component_access_token"]            expires_in = time.localtime(int(time.time()) + json.get("expires_in", 0))            expires_at = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT, expires_in)            self.token_expires_at = expires_at            parm = {                'component_access_token': self._token,                'token_expires_at': self.token_expires_at,                'date_token': time.strftime(DEFAULT_SERVER_DATETIME_FORMAT),            }            obj = self.pool.get('tl.open.weixin.app')            obj.write(self.cr, SUPERUSER_ID, self.public_account_id, parm)            return self._token        if "errcode" in json:            _logger.warn(u"被动更新TOKEN，%s[%s]" % (json["errmsg"], json["errcode"]))            return False    def strip_tags(self, html):        """        清除html标签        """        s = MLStripper()        s.feed(html)        return s.get_data()    def upload_material(self, type, media_file, file_name, title, introduction):        """        新增临时素材        通过POST表单来调用接口，表单id为media，包含需要上传的素材内容，有filename、filelength、content-type等信息。        请注意：图片素材将进入公众平台官网素材管理模块中的默认分组        媒体文件类型，分别有图片（image）、语音（voice）、视频（video）和缩略图（thumb）        详情请参考http://mp.weixin.qq.com/wiki/15/2d353966323806a202cd2deaafe8e557.html        :return: 返回的 JSON 数据包        """        return self.post(            url="https://api.weixin.qq.com/cgi-bin/media/upload",            params={                "access_token": self.token,                "description": {                    "title": title,                    "introduction": introduction,                },                'type': type,            },            files={                'media': (file_name, media_file, 'application/octet-stream'),            }        )    def card_get_apply_protocol(self):        """        卡券开放类目查询接口        通过调用该接口查询卡券开放的类目ID，类目会随业务发展变更，请每次用接口去查询获取实时卡券类目。        注意：        1.本接口查询的返回值还有卡券资质ID,此处的卡券资质为：已微信认证的公众号通过微信公众平台申请卡券功能时，所需的资质。        2.对于第三方开发者代制模式（有公众号），子商户无论选择什么类目，均提交营业执照即可，所以不用考虑此处返回的资质字段，返回值仅参考类目ID即可。        :return: 返回的 JSON 数据包        """        return self.get(            url="https://api.weixin.qq.com/card/getapplyprotocol",            params={                "access_token": self.token,            }        )